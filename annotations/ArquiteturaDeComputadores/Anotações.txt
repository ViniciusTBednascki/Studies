linguagem de alto nível -> linguagem de maquina

assembly

1Byte(B) = 8bits(b)

compilador: traduz todo o código fonte para um 
arquivo em linguagem de máquina que pode ser 
lido pelo computador diversas vezes sem
mais a necessidade do código fonte.

interpretador: traduz o código fonte linha a linha
simultamente com a execução do programa.

    Compilador	X	   Interpretador

.Execução rápida		.Execução lenta
.Verifica erros antes		.Verifica erros somente
 de executar		 quando executado
.Tempo de compilação	.Executa na hora
.Executa em máquinas	.Executa em qualquer
 específicas		 máquina

JIT compilation: meio-termo entre compilador e interpretador

Java: compila o código fonte em um arquivo byte code(.class)
que depois será interpretado para o computador pela máquina
Virtual Java(JVM)

Memória secundária:
HD e SSD
Memória não volátil

Memória de trabalho:
RAM(random access memory)
Memória volátil
Possue diversos enderços onde a memória é armazenada

memória ROM(read only memory): não-volátil de baixo armazenamento
onde o computador busca informações como BIOS(Basic Input/Output System)
ao inicializar.

CPU(Processador):
	UC - Unidade de controle
	ULA - Unidade Lógico Aritmética
	Registradores: armazenamento temporário para as operações
Sequencia de funcionamento da CPU:
	Buscar: busca as intruções na RAM
	Decodificar: decodifica a instrução atual
	Executar: executa a operação

Quando estiver programando sempre levar em conta
o tempo de execução e a memória necessária para o
programa.

Processadores atuais
"linha de montagem" para a sequencia de execução
mais de um núcleo de processamento (dual e quad-core)

Input/Output:
Drivers de dispositivo
Placa de video - responsável por fazer os cálculos para atualizar as posições e cores dos pixels

multitasking - processa operações diferentes por um pequeno periodo de tempo para que as outras não parem

Cache:
DRAM(Dynamic RAM) - mais barata porem mais lenta, utilizada para armezenar uma quantidade maior de dados
SRAM(Statyc RAM)/Cache - mais rápida porem mais cara, utilizada para armazenar os dados que serão necessários paras as operações atuais
Com essa divisão as instruções são transferidas em blocos da DRAM para a SRAM dimnuindo assim o tempo de transferencia de informações

Hierarquia de memória:
Criada para contornar o problema de armazenamento X velocidade de acesso X custo
Quanto mais alto na herarquia maior a velocidade e menor o armazenamento
1 - registradores
2 - cache L1
3 - cache L2
4 - cache L3
5 - RAM
6 - SSD
7 - HD
8 - Cloud

Principio da localidade:
Localidade temporal (Acessar de novo em breve)
Localidade espacial (Acessar o vizinho em breve)

32bit/64bit - é o tamanho de informação que a CPU pode processar em um ciclo de clock
Assim o tamanho da informação guardada no registrador muda

Um registrador de 64bits consegue registrar mais posições da memória, assim
pode se ter uma memória maior que em um de 32bits que só consegue registrar
até 4GB de RAM.

Uma lista guarda a posição do elemento inicial(n) e o tamanho dos elementos(s) iniciais
assim para acessar a posição(p) do elemento (i) da lista será p = n + i * s
Uma lista de listas guarda a posição das listas e não seus valores.
esses valores são chamados de ponteiros, não possuem um valor próprio mas apontam para outra região da memória

Números de ponto flutuante: utliza-se 1bit para o sinal, 8bits para o expoente e 23bits para o coeficiente.

LINKS ADCIONAIS:

Overclocking: https://pt.wikipedia.org/wiki/Overclocking
Superaquecimento: https://pt.wikipedia.org/wiki/Superaquecimento_do_processador
Boot do computador: https://www.tecmundo.com.br/aumentar-desempenho/11266-como-funciona-o-boot-de-um-computador.htm
Placa de vídeo: https://www.oficinadanet.com.br/hardware/27791-o-que-e-a-placa-de-video
GPU e Deep Learnig: http://www.cienciaedados.com/gpu-e-deep-learning/
TPU video: https://www.youtube.com/watch?v=MXxN4fv01c8
Memcached: https://aws.amazon.com/pt/memcached/
Redis: https://aws.amazon.com/pt/redis/
CDN: https://www.youtube.com/watch?v=02rvd_7HcFY
Cache-friendly example: http://cpp.sh/5ery6
LTO: https://cbltech.com.br/blog/vantagens-e-desvantagens-de-se-utilizar-fitas-magneticas-para-backup-de-dados.html#:~:text=Estima%2Dse%20que%2C%20em%20condi%C3%A7%C3%B5es,dependendo%20da%20forma%20de%20grava%C3%A7%C3%A3o
UTF-8: http://utf8everywhere.org/
Images, Pixels and RGB: https://www.youtube.com/watch?v=15aqFQQVBWU
How Image Compression Works: https://www.youtube.com/watch?v=Ba89cI9eIg8
How Digital Audio Works: https://www.youtube.com/watch?v=1RIA9U5oXro
List of arbitrary-precision arithmetic software: https://en.wikipedia.org/wiki/List_of_arbitrary-precision_arithmetic_software
Python Arbitrary-precison integer: https://rushter.com/blog/python-integer-implementation/
Javascript Number: https://developer.mozilla.org/pt-BR/docs/Glossary/Number
Programing Languages comparison: https://en.wikipedia.org/wiki/Comparison_of_programming_languages_%28basic_instructions%29
