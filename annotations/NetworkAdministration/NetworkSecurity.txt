Os hubs não conseguem “aprender” qual equipamento está conectado em cada porta. Dessa forma, ele repassa a informação para todas as suas portas, causando uma lentidão em nossa rede, assim como uma potencial vulnerabilidade de segurança visto que um usuário mal-intencionado poderá fazer o uso de análises de protocolos de rede para decifrar o que uma possível vítima estava acessando.

LOTAÇAO DA MEMÓRIA DO SWITCH
O hacker pode vir a comprometer o funcionamento de um switch ao "lotar" essa memória com uma série de endereços mac. Uma vez que essa memória está cheia, o Switch não consegue distinguir que máquina está conectada em cada porta e dessa forma, ele passará a atuar como se fosse um hub.

A simulação pode ser feita através do gns3 ecom utilizando o kali linux com uma virtualBox, se estiver no windows.

para fazer um ping continuo: ping [IP] -t

No Kali Linux:
ifcoonfig (mostra as configurações nas interfaces)
macof -i [interface](ex: eth0) (overflow de endereços mac para atacar o switch)

no console do computador: arp -a (mostra a tabela de endereços salvos na memória)

Configurar proteção da porta do switch para apenas um endereço mac:
switch#show mac-address-table (mostra os endereçs salvos)
switch(config)#interface [interface] (ex: fa0/1)
switch(config-if)#switchport mode access (mudar para o modo de acesso)
switch(config-if)#switchport port-security mac-address [endereço mac](ex: 00E0.B0AE.A127)
Dessa forma, estamos configurando essa porta para aceitar somente um endereço mac. Caso o hacker tente realizar esse ataque inserindo vários endereços mac, a porta do switch irá desabilitar e o hacker não terá sucesso.

MITM
(bettercap e setoolkit)
Outro ataque possível é o MITM(man in the middle) onde o hacker faz com que todos os protocolos de comunicação entre duas máquinas passem pelo seu computador primeiro. Feito através do "envenenamento" da tabela arp (arp spoofing).
https://www.veracode.com/security/arp-spoofing

O ataque Man In The Middle consiste em explorar a forma sem estado (stateless) na qual o protocolo ARP trabalha. Dessa forma, um Hacker pode usar de ferramentas para enviar respostas desse protocolo com o intuito de manipular a tabela ARP de suas vítimas para ficar assim no meio da comunicação e visualizar o que é trafegado entre os dispositivos manipulados.

ARP -a (mostra a tabela arp de endereços salvos, cmd modo administrador)

No Kali Linux:
É preciso primeiro instalar a ferramenta pelo console:
(no curso o instrutor utilizou mitmf, mas essa é uma ferrementa desatualizada)
apt-get install mitmf
então para fazer o ataque de arp spoofing:
mitmf --arp --spoof --target [IP vítima] --gateway [IP roteador] -i [interface]

DNS spoofing - feito utilizando ferramentas para redirecionar a tradução da URL para uma página em controle do hacker, geralmente cópia da página que a vítima pretende acessar e redirecionando a comunicação para essa cópia, assim tendo acesso as informações que a vítima mande para essa página.
No Kali Linux:
altera no arquivo mitmf.conf para que *alura.com.br seja redirecionado para o ip do hacker
Cria-se a página que a vítima irá acessar e incia um servidor para que a vítima acesse.
então inicia-se o ataque:
mitmf --arp --spoof --target [IP vítima] --gateway [IP roteador] -i [interface] --dns

DoS
(slowloris)
Um ataque de negação de serviço ou em inglês Denial Of Service (DoS) ocorre quando temos um usuário que utiliza de recursos para causar uma sobrecarga em um sistema com o principal objetivo de torná-lo indisponível para outros usuários.

O Slowloris abre mútiplas conexões com o alvo de destino e tenta manter essas conexões ativas pelo máximo tempo possível. O Slowloris encaminha continuamente requisições HTTP de forma parcial, as quais não são completadas. Os serviços que são alvos desse ataque podem manter essas conexões abertas aguardando que as requisições iniciadas sejam completadas. Dessa forma, a ideia é que em algum momento, o pool de conexões será consumido e novas requisições legítimas não serão processadas.

Proteção contra DoS
a utilizaçao de um ou outro equipamento vai depender muito do cenário ou necessidade.

IDS - intrusion detection system, é um equipamento conectado na rede do servidor que fará um espelhamento de todo o tráfego de acesso e manda um aviso caso encontre atividades suspeitas mas não impede o ataque de ser realizado.
IPS - intrusion prevention system, é uma equipamento conectado entre o tráfego de dados e o servidor e que irá impedir a transmissão adiante de dados que forem suspeitos.

O Intrusion Detection System (IDS) recebe apenas cópias dos tráfego, dessa forma, ele não é capaz de impedir que um ataque seja propagado para outros pontos da nossa rede. Ele irá encaminhar alarmes para que possamos assim saber dos problemas que foram detectados e encontrar soluções.
O Intrusion Prevention System (IPS) é conectado diretamente na rede, dessa forma, ao analisar algum tipo de anomalia o IPS é capaz de impedir que esse tráfego seja propagado para outros pontos da minha rede.

DDoS 
Distibuted denial of service, é o ataque DoS feito por diversas máquinas, geralmente botnets. Esses computadores são infectados e comprometidos para que realizem o ataque simultaneo a um servidor.
O ataque DDoS (Distributed Denial of Service) consiste em tirar a concentração do ataque em um usuário, como é feito no ataque de DoS e distribuir o ataque por vários usuários. Isso pode ser obtido por exemplo quando usuários fazem download de arquivos infectados. Uma vez que tais máquinas foram infectadas, o Hacker poderá controlá-las para que possa assim iniciar um ataque distribuído contra um serviço. O objetivo de tal ataque seria de causar uma "saturação" no link do alvo e com isso torná-lo indisponível para que outros usuários acessem o serviço.

Uma botnet é um grupo de máquinas que foram comprometidas de alguma forma (por exemplo vírus, malware, etc). Tais máquinas infectadas passam a ser usadas por hackers para fazerem ataques contra um determinado serviço a fim de torná-lo indisponível. Pelo fato de termos várias máquinas atuando nesse ataque, chamamos esse de um ataque de negação de serviços distribuído (DDoS).

Ataques do lado do servidor
(Nmap metasploit Nessus)
O Nmap (Network Mapper) é um programa usado para reconhecimento de hosts e serviços que estão rodando em determinada rede, sendo assim uma ferramenta muito útil para verificar possíveis vulnerabilidades que possam exisitir.
nmap -A [IP do servidor]
Ao verificar os serviços e as versões que estão sendo utilizados, pode-se ver se algum desses possui alguma vulnerabilidade que pode ser atacada.
Esses ataque pode ser feito por explois utilizando frameworks como o Metasploit, podendo assim até conseguir acesso remoto a máquina atacada.

Existe também softwares especializados em verificar as vulnerabilidades das versões dos serviços que estão sendo utilizados como o Nessus por exemplo. As vulnerabilidades encontradas pelo Nessus são documentadas na Common Vulnerabilities and Exposure (CVE) e podem ser vistas em National Vulnerability Database e exploits dessas vulnerabilidades podem ser obtidos em Exploit Database (recomendado pois existe uma verificação dos exploits postos por usuarios).

O Reverse Shell seria a forma na qual o comando de uma máquina é obtida através de uma conexão da máquina alvo com a máquina de ataque. Ou seja, a conexão é estabelecida na direção reversa ao qual o ataque é realizada.
Esse tipo de ataque torna-se muito útil, pois é possível que equipamentos de segurança como o Firewall nos conceda permissão de acesso a rede interna uma vez que nosso pacote é um retorno a uma requisição que foi originada por um usuário interno a rede.

Uma das formas de se obter um Reverse Shell seria da vítima clicar em um arquivo malicioso criado por um Hacker e através desse arquivo malicioso ocorrerá uma conexão reversa com a máquina de ataque.
Tais arquivos podem ser criados por exemplo com o msfvenom, onde podemos especificar o sistema operacional da vitima e como queremos realizar o ataque.


FIREWALL
O firewall é usado para dividir uma rede segura (rede interna) de uma rede não segura(por exemplo, a internet) e podemos assim controlar o tráfego que é permitido ou negado entre a rede interna e a rede externa. De forma geral, um usuário que esteja na rede interna poderá acessar recursos que estão na rede externa, porém um usuário da rede externa não terá permissão de acessar recursos da rede interna.

Região DMZ - a região desmilitarizada seria a região na qual temos recursos que devem ser acessados por usuários da internet. Dessa forma, conseguimos isolar essa região de recursos que precisam ser acessados externamente dos recursos que devem ser acessados somente por usuários de nossa rede interna.

Os firewalls stateful conseguem guardar em sua memória informações das requisições internas que foram iniciadas. Quando ocorre um retorno desse pacote o firewall compara com sua tabela de memória elementos como endereço IP, portas de comunicação, etc e com isso consegue definir que trata-se de uma informação de retorno e com isso permitirá acesso a rede interna.

O firewall é um dos vários elementos de extrema importância para proteção de acessos não autorizados. Conceitualmente tem a função de bloquear qualquer tipo de tráfego e permitir somente os acessos autorizados. O firewall pode ser usado tanto para proteção de um rede, mas também para a proteção de um único servidor.
Dependendo do seu provedor de serviços, será necessário configurar algum elemento de proteção. No caso de se tratar de hosts Linux, o iptables é uma excelente opção. A AWS oferece o recurso Security Groups, que nada mais é do que um firewall com uma interface gráfica, nativo da plataforma.

Criação de instancias e utilização do aws-EC2: https://intellipaat.com/blog/what-is-amazon-ec2-in-aws/

A comunicação do protocolo HTTP é feita através da porta 80.
A comunicação do protocolo SSH é feita através da porta 22.
Portas padrão dos protocolos: 
https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml

Na criação das regras do firewall pode-se definir essas como inbound ou outbound. Outbound limita o acesso da rede interna para outras redes e inbound limita o acesso de outras redes para a rede interna.

Uma dica de segurança é mudar a porta de acesso padrão de gerenciamento, como do protocolo SSH e  do servidor.
https://www.ionos.com/help/server-cloud-infrastructure/getting-started/important-security-information-for-your-server/changing-the-default-ssh-port/

pfSense

para configurar o pfsense é importante configurar o ip da interface de WAN e de LAN, configurar também o servidor DNS e o gateway (o roteador).

Logo após a instalação, sem termos feito nenhuma customização, é possível acessar o pfSense através do browser (porta 80) e também através do console do próprio firewall. Por default, o acesso via SSH vem desabilitado.
Para um gerenciamento seguro, é recomendável que você desabilite o acesso à porta 80 ( a porta padrão do HTTP) e habilite o gerenciamento web exclusivamente pela porta 443 (HTTPS).
É fundamental que você configure uma senha para acesso ao console, pois mesmo tendo acesso físico ao pfSense, é necessário autenticação para acessá-lo.

Logo após a instalação default do pfSense, todo tráfego inbound é bloqueado, enquanto todo o tráfego outbound é liberado. O uso de aliases facilita e organiza melhor as regras do pfSense. É uma boa prática utilizá-los.

Caso o tráfego/protocolos com acesso à Internet não sejam limitados, todas as redes (internas) permitidas poderão acessar qualquer tipo de serviço na Internet. Em geral esta não é uma boa prática corporativa! Limitar os tipos de protocolos diminui a incidência de problemas de segurança.

Quando um servidor na rede interna tiver o seu acesso concedido a partir da Internet, é necessário fazermos um NAT através da opção PortFoward.Por default, o pfSense já cria automaticamente o NAT, utilizando o próprio endereço da interface WAN.


iptables

netfilter é um framework que ja vem embutido no kernel do linux.
O iptables é um recurso interno do kernel do Linux. Você não precisa instalá-lo ou mesmo ativá-lo, basta apenas configurar as regras de bloqueio.

adcionando regras ao iptables:
Para adcionar uma regra ao final da chain: iptables -A [chain de regras](INPUT/OUTPUT/FOWARD) -p [protocolo](ex: tcp/udp/icmp) -s [ip de origem](ex: 0.0.0.0/0) -d [ip de destino](ex: 192.168.0.16) --dport [porta de comunicação](ex: 80/22/443) -j [função](ex: ACCEPT/DROP)

Para inserir uma regra em uma posição específica: iptables -I [chain de regras](INPUT/OUTPUT/FOWARD) [posição](ex: 1/2/3/4/...) -p [protocolo](ex: tcp/udp/icmp) -s [ip de origem](ex: 0.0.0.0/0) -d [ip de destino](ex: 192.168.0.16) --dport [porta de comunicação](ex: 80/22/443) -j [função](ex: ACCEPT/DROP)


nesse exemplo como a origem é de qualquer ip e o firewal é para a própria máquina pode-se fazer:
iptables -A INPUT -p tcp --dport 80 -j ACCEPT

Para apagar as regras criadas, usa-se o comando iptables -F
Para listar todas as regras, usamos iptables -L -n(para não resolver nomes DNS)
A política padrão é ACCEPT (significa que se o pacote não estiver em nenhuma das regras ele passa)
Para apagar uma regra, iptables -D [chain de regras](INPUT/OUTPUT/FOWARD) [numero da regra]

O posicionamento das regras dentro de um firewall é pré-requisito para o correto funcionamento do mesmo. Uma boa prática é colocar logo no início as regras responsáveis por tratar o maior volume de requisições, dessa maneira você otimiza os recursos (memória, CPU, etc) utilizados pelo firewall.

Partindo do princípio que há um servidor web, banco de dados, entre outras aplicações, tudo funcionando na mesma máquina, quando o servidor web consulta o banco de dados, por exemplo, o IP de origem não é o IP associado à interface ethernet, e sim o IP da interface loopback. Por isso, deve-se criar uma regra para permitir essas conexões internas do servidor. Se não houver uma regra desse tipo no firewall, as conexões internas na mesma máquina não irão funcionar.No momento de criar a regra, para permitir qualquer origem ou destino, basta não especificá-los. Além disso, passa-se a flag -i (de interface) e especifica-se a interface lo (de loopback): iptables -A INPUT -i lo -j ACCEPT

Se você desejar logar um determinado tipo de acesso é necessário criar primeiro a regra tipo LOG e depois a regra em questão. Caso essa ordem seja invertida, não haverá pacotes a serem logados, uma vez que eles já encaixaram na regra anterior.

Mesmo sendo o papel do firewall bloquear todo tipo de tráfego que não foi explicitamente permitido, é necessário ao final da criação de todas as regras mudar a POLICY para DROP. Por isso uma boa prática é criar todas as regras, acompanhar o que realmente está passando pelo firewall e por fim aplicar o DROP.

Em sistemas baseados em debian é possivel baixar o pacote "iptables-persistent" para gerenciar a criação automática das regras salvas no arquivo ao iniciar o servidor.

iptables -I INPUT 1 -p icmp --icmp-type echo-request -j DROP (Caso ache necessário pode-se utilizar esse comando para bloquear o ping à essa máquina)

CRIANDO UMA IPTABLES PARA O SERVIDOR:
	Regra para aceitar conexões que já foram estabelecidas e estão salvas na memória:
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT (esse regra é importante de se colocar em primeira para economizar recursos, já que deixara que conexões que ja foram estabelecidas não precisem passar pela tabela para serem aceitas.

	iptables -A INPUT -i lo -j ACCEPT (essa regra é importante para que a comunicação entre os serviços dentro da máquina utilizando o ip de loopback sejam aceitos e possam funcionar, como por exemplo a comunicação do servidor com o banco de dados.)

	iptables -A INPUT -p tcp -d 192.168.0.16 --dport 80 -j ACCEPT (habilitando a comunicação na porta 80 (HTTP) de qualquer origem)

	iptables -A INPUT -p tcp -d 192.168.0.16 --dport 443 -j ACCEPT (habilitando a comunicação na porta 80 (HTTPs) de qualquer origem)

	iptables -A INPUT -p tcp -s 192.168.0.9 -d 192.168.0.16 --dport 22 -j ACCEPT (Essa regra é para se for neccessário a comunicação SSH com o servidor, o melhor é definir um ip de origem fixo, mas se não for possivel pode se definir origem qualquer)

	iptables -I INPUT 5 -p tcp -s 192.168.0.9 -d 192.168.0.16 --dport 22 -j LOG (regra para criar logs de conexão na porta 22, importante inserir essa regra antes da regra de conexão)

	iptables -A INPUT -p tcp -s 192.168.0.9 -d 192.168.0.16 --dport 3389 -j ACCEPT (Essa regra é para se for neccessário a comunicação RDP com o servidor, o melhor é definir um ip de origem fixo, mas se não for possivel pode se definir origem qualquer)

	iptables -P INPUT DROP (mudar a politica da chain para DROP, permitindo assim somente as conexãos informadas na tabela)

	iptables-save > [local do arquivo](ex: /home/server/Documentos/regras-firewall) (Esse comando serve para salvar as regras atuais do iptables em um arquivo)

	iptables-restore < [local do arquivo](ex: /home/server/Documentos/regras-firewall) (Esse comando serve para utilizar as regras salvas em um arquivo no iptables)


Existem diversos protocolos que conseguem realizar o acesso remoto, dois dos mais conhecidos são o SSH e o Telnet. Com ambos protocolos nós conseguimos acessar outro computador remotamente e criar um terminal virtual, que nada mais é do que a emulação do terminal da máquina acessada em nossa própria máquina. 
Ambos protocolos podem ser usados para acessar computadores remotamente, porém existe algo muito importante que diferencia os dois. A criptografia. O telnet não possue criptografia o que faz com que as informações estejam possam ser interceptadas e lidas por ataques de Men in the Middle e por sniffers como o wireshark.
