HTTP - Hypertext Transfer Protocol

URI: URL e URN.

O HTTP é um conjunto de regras de comunicação muito utilizado na internet com o modelo Client-Server.

Outro modelo de comunicação é P2P (Peer-to-peer), em que ao invés de comunicação se concentrar em um servidor, como no HTTP, todos os computadores atuam tanto como servidor e como cliente.

Um dos problemas com a comunicação HTTP é que os dados podem ser lidos por qualquer um que consiga intermediar essa comunicação, para evitar esse problema de segurança foi estabelecido o HTTPS que é o protocolo HTTP junto do SSL/TLS (Secure Sockets Layer/Transport Layer Security)
A comunicação é feita criptografando o dados utilizando a chave pública disponibilizada para o browser e depois a descripitografia é feita no servidor com a chave privada.

Existem dois tipos de criptografia:
Simétrica - a mesma chave é utilizada para criptografar e descriptografar a informação. Essa forma é mais rápida porém menos segura
Assimétrica - utiliza duas chaves diferentes, uma para criptografar e outra para descriptografar a informação. Essa forma é mais segura porém lenta.

O HTTPS utiliza as duas formas de criptografia, utiliza-se na primeira comunicação a criptografia Assimétrica para transmitir uma chave que ficará guardada com o browser e o servidor, essa chave de criptografia simétrica será usada então em comunicações posteriores.

O acesso aos servidores é feito em portas definidas, como por exemplo a porta 80 (HTTP), 443 (HTTPS), 22 (SSH), 21 (FTP), etc. 
A porta em que uma comunicação será pode ser alterada no servidor.

A URL são endereços da WEB. A URL começa com o protocolo (HTTPS://) seguido do dominio (www.alura.com.br), após o dominio pode ser específicado o caminho para o recurso (course/introducao-html-css). Um recuros é algo concreto que queremos acessar.

O protocolo HTTP segue o modelo Requisição-Resposta

Sessão:
o HTTP é statless (não mantém informações entre requisições), uma requisição precisa ter todas as informações para gerar a resposta.
Ao enviar as informações de login para ao servidor ele devolve um código para que o browser guarde e utilize nas próximas vezes que for necessário enviar informações pelo mesmo usuário, isso é feito para que não seja necessário ficar enviando as informações como login e senha todas as vezes que o browser for fazer uma requisição ao servidor.
Uma sessão HTTP nada mais é que um tempo que o cliente permanece ativo no sistema! Isso é parecido com uma sessão no cinema. Uma sessão, nesse contexto, é o tempo que o cliente usa a sala no cinema para assistir a um filme. Quando você sai da sala, termina a sessão. Ou seja, quando você se desloga, a Alura termina a sua sessão.

Quando falamos de Cookies na verdade queremos dizer Cookies HTTP ou Cookie web. Um cookie é um pequeno arquivo de texto, normalmente criado pela aplicação web, para guardar algumas informações sobre usuário no navegador. Quais são essas informações depende um pouco da aplicação. Pode ser que fique gravado alguma preferência do usuário. Ou algumas informações sobre as compras na loja virtual ou, como vimos no vídeo, a identificação do usuário. Isso depende da utilidade para a aplicação web.


Ao entrar em uma página o navegador faz de uma requisição para cada elemento da página, como o html, css, logo, imagens, etc.
Ao utilizar um método HTTP, como GET ou POST, recebemos uma resposta, o código de estado dessa respota pode ser 200 dizendo que tudo ocorreu certo, ou pode ser um código de estado indicando o erro que ocorreu, como 404 dizendo que não foi possível encontrar a página. 
301 moved permantly, informa ao nevegador e redireciona para outra URL.
500 Internal server error, informa que houve um erro do lado do servidor.

Os Status codes podem ser separados em:
2XX - Successful reponses
3XX - Redirection messages
4XX - Client error responses
5XX - server error responses
https://www.w3schools.com/tags/ref_httpmessages.asp


Parametros na requisicição:
Ao utilizar o método GET os parâmetros são passados pela junto da URL depois do recuro e logo após o simbolo "?" e são separados pelo simbolo "&" como por exemplo: 
https://www.youtube.com/results?search_query=nerdologia&sp=CAI%253D	onde os parametros são: search_query=nerdologia e sp=CAI%253D
https://endereco/recurso?nome_do_parametro=seu_valor&nome_do_outro_param=valor
Isso é útil quando é necessário repetir a requisição com os mesmos parametros.

GET é normalmente usado para pesquisas, mas isso depende um pouco de como a plataforma e o desenvolvedor usam esse método. Na vida real, vocês vão encontrar muitos exemplos que usam requisições do tipo GET, não só para pesquisas. O protocolo HTTP define que o GET deve ser utilizado apenas para acessar os dados, mas HTTP, como protocolo, não pode impedir o desenvolvedor de fazer algo diferente.

O método POST deixa os parâmetros no corpo da requisição, assim evita que informações importantes, como a senha, fiquem explícitas na URL. 

Os parametros podem ser definidos para serem passados na própria URL, ex: http://viacep.com.br/ws/20040030/json.
Nesse exemplo é definido que o número após o ws/ é p CEP e o próximo valor é o formato da resposta como JSON ou XML
Um Web Service disponibiliza uma funcionalidade na web, através do protocolo HTTP. As funcionalidades variam muito e dependem muito da empresa e do negócio dela, mas por exemplo, na Alura temos um Web Service que traz todas as informações de um curso (nome, capítulos, exercícios, etc). O Google ou Facebook possuem muitos Web Services para acessar um usuário, ver os posts dele, interesses, etc. Muitas vezes esses serviços são pagos.
O importante é que sempre usamos o protocolo HTTP. A grande diferença de um Web Service é que os dados não vem no formato HTML, e sim em algum formato independente da visualização, como XML ou JSON. 

Métodos HTML:
GET - receber dados (parametros na URL)
POST - submeter dados (parametros no corpo da requisição)
DELETE - remover um recurso
PUT - atualizar um recurso

Por padrão, as páginas HTML fazem apenas requisições do tipo GET ou POST. Para o tipo POST especificamente, precisamos fazer uso da tag form, configurando o atributo method como POST, ao invés do seu valor padrão que é GET. O outro caso é quando usamos a tag a que cria um link de uma página para outra, fazendo com o que o navegador execute uma requisição do tipo GET.

Serviços Web com REST:
Para a comunicação entre os serviços na Web utiliza-se formatos padrões para enviar e receber dados como o XML e o JSON, ao fazer uma requisição o serviço pode informar em qual formato deve ser a resposta com 
Accept: application/json, Accept: text/html, Accept: text/css, Accept: application/xml, Accept:image/jpeg e Accept: image/*

REST (Representational State Transfer)
	RECURSO (URI)
	OPERAÇÔES (GET/POST/DELETE/PUT)
	REPRESENTAÇÃO (JSON/XML/HTML)
É um padrão arquitetural para comunicações entre aplicações, recursos são definidos via URI.

Em alguns cabeçalhos do HTTP devemos especificar algum formato. Os formatos são chamados na documentação de MIME types. E na definição do cabeçalho usamos a seguinte estrutura: tipo/subtipo. 
ex: text, image, application, audio e video


HTTP/2:
Uma das mudanças na nova versão do HTTP é que o corpo da resposta é trafegado de forma zipada, muitas vezes utilizando o algoritimo de GZIP. Isso é feito para o tráfego de dados seja menor, assim levando em conta os dispositivos móveis e a largura de banda menor.

Também os cabeçalhos do request e do response são enviados em formato binário para uma maior otimizição da comunicação. O HTTP/2 traz também outro algoritimo para compresão dos cabeçalhos, o HPACK, tornando a comunicação ainda mais rápida para a necessidade atual.
Por padrão outra função que essa nova versão traz é o cripitografia dos dados utilizando TLS.
O HPACK é uma tecnologia especializada em comprimir os Headers das comunicações HTTP/2. Como toda requisição HTTP acompanha algum header por padrão, uma tecnologia de compressão embutida no protocolo é demasiadamente útil para economizar dados trafegados.

HEADERS STATEFUL - No HTTP/2 não há mais a necessidade de reenviar as mesmas informações no cabeçalho das que foram enviadas em requisições anteriores no mesmo host, assim só há a necessidade de enviar no cabeçalho novas informações como diferentes tipos de formatos de resposta ou a mudança para um sub-domínio, diminuindo assim o tráfego de dados na comunicação.

SERVER PUSH - Nessa nova versão servidor quando recebe uma requisição de página envia junto da resposta principal as resposta de outros recursos necessários para carregar a página como o CSS, o Script, imagens e logos. Assim o navegador não precisará fazer uma nova requisição para cada componente economizando tempo e tráfego de dados.

Multiplexação - No HTTP1.1 para não ser necessário fazer uma conexão TCP toda vez que ocorre-se uma requisição ao servidor utiliza-se o recurso Keep-Alive para que a conexão TCP não feche e o servidor possa ter de 4 a 8 conexões simultaneas com o navegador. No HTTP/2 a comunicação é Assincrona, não mais serial, assim não há necessidade de esperar pela resposta para fazer uma nova requisição tornando a conexão mais rápida.
