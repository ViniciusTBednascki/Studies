Projeto de exemplo está no repositorio: */Projeto_NodeJS

O NPM possue o pacote express para criação de servidores

Para iniciar o projeto utiliza-se o comando: npm init

para inicializar o servidor utliza o comando .listen(), indicando a porta que será escutada e que função irá rodar na inicialização
ex: const app = express();
app.listen(3000, () => console.log("Escutando na porta 3000"))

Porém para que a comunicação HTTPS funcione é preciso dizer o que irá acontecer quando o servidor receber uma requisição como o GET por exemplo:
app.get('/atendimento', (req, res) => res.send("Você está na rota de atendimento"))

Para baixar pacotes que serão utilizados somente no ambiente de desenvolvimento e não serão necessários na produção usa a tag: --save-dev ao instalar o pacote, ex:
npm install --save-dev nodemon

Nodemon é um pacote para o desenvolvimento que automatiza o processo de atualização do servidor, assim não é preciso ficar derrubando e iniciando o servidor manualmente a cada modificação do código. Inicializa-se o servidor como o comando:
nodemon index.js

No package.json podem ser criados scripts para facilitar o processo de desenvolvimento e produção, como por exemploa a inicialização do servidor:
"scripts": {
	"start": "node index.js"
}

O pacote Consign tem como função fazer o load automatico dos módulos para a instancia criada pelo Express

Exitem diversas maneiras e ferramentas para fazer o teste de APIs entre elas estão:
POSTMAN
Curl

Para conseguir interpretar o conteúdo (urlencoded, json, etc.) enviado pelas requisições é necessário bibliotecas especificas para isso como:
body-parser

exemplo de uso: app.use(bodyParser.urlencoded({extended: true}))
    		app.use(bodyParser.json())

Para utilizar o banco de dados é preciso instalar o pacote mysql e ter o mysql server

Para lidar com datas uma boa biblioteca é a moment

O NodeJS possue o NVM (Node Version Manager) que é um gerenciador de versões do Node e pode ser utilizado para installar e utilizar diferentes versões do Node na mesma máquina.

Para utilizar um debugger o node pode utilizar a flag: --inspect e assim podemos fazer um attach ao programa em execução e fazer um debug mais facilmente.

A leitura e escrita de arquivos é feita utilizando a biblioteca fs (file system). A leitura de arquivo pode ser feita utilizando um buffer com a função: readFile(), porém essa é uma função síncrona o que pode deixar o programa muito lento se o arquivo for grande, por isso o mais recomendado é utilizar uma stream com: createReadStream(), que funciona de maneira assíncrona.
Por ser uma função assíncrona e não ter uma função de callback é preciso utilizar a função: .pipe() para realizar o processamento da stream após a leitura do arquivo.
Para chamar uma função após o término do processamento da stream pode-se usar a função: on('finish') para escutar o evento.

Mesmo que o motor do javascript onde o Node é executado seja síncrono o Node consegue utilizar funções assíncronas delegandos essas para terceiros como o Chrome WebApi ou C++ API e que após serem finalizadas seram colacadas no callback queue e inseridas após a execução das funções síncronas no Stack JS



Stream é uma instância da classe EventEmitter, que está dentro do módulo nativo events (eventos).

Todo EventEmitter emite:

    o evento “newListener” quando um novo listener é adicionado
    e “removeListener” quando um listener é removido. 

Legal, mas no que isso importa pra gente? Bom, esses eventos são ouvidos por um listener e, como a stream é uma instância da classe EventEmitter, ela também trabalha esperando por eventos serem desencadeados, emite eventos que adicionam e removem listeners e, dessa forma, entram no event loop do javascript!

Além do módulo events, o Node.js possui diversos outros módulos nativos compilados em binário à nossa disposição que você pode conferir na página de Core Modules do Node.js.

Um pacote para comunicação com outras APIs é o AXIOS

Para que criar módulos que possam ser utilizados em outros arquivos utiliza-se o module.exports para definir o que poderá ser utilizado por outros programas ao importarem esse arquivo com o require(), como funções ou objetos.

Uma biblioteca para mexer com banco de dados é a Sequelize